# suppress inspection "SpringBootApplicationProperties" for whole file

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://localhost:5432/poc
spring.datasource.username=${dbUser:postgres}
spring.datasource.password=${dbPass:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.test-on-borrow=true
spring.datasource.test-while-idle=true
spring.datasource.validation-query=SELECT 1
spring.datasource.validation-timeout=10000
spring.datasource.validation-interval=180000

spring.datasource.testOnBorrow=true
spring.datasource.validationTimeout=10000
spring.datasource.validationInterval=180000
spring.datasource.validationQuery=SELECT 1
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.org.hibernate.envers.audit_table_prefix=z_
spring.jpa.properties.org.hibernate.envers.audit_table_suffix=
spring.jpa.properties.org.hibernate.envers.store_data_at_delete=true
#spring.jpa.properties.org.hibernate.envers.default_schema=audit
# Escape reserved words
hibernate.globally_quoted_identifiers=true

# ===============================
# = flyway
# ===============================
#spring.flyway.baseline-on-migrate=true

# ===============================
# = RAINBOW / API
# ===============================
rainbow.host=https://${rbwHost:sandbox.openrainbow.com/api/rainbow}
rainbow.appId=${rbwAppId:APP_ID}
rainbow.secret=${rbwSecret:APP_SECRET}

# ===============================
# = ENVIRONMENT
# ===============================
# Define a custom port instead of the default 8080
server.port=9090
api.environment=${apiEnv:development}

# Project version from POM.xml
api.version=@project.version@
# ===============================
# = HTTPS / SSL
# ===============================

# Tell Spring Security (if used) to require requests over HTTPS
# security.require-ssl=true
#
## The format used for the keystore
#server.ssl.key-store-type=PKCS12
## The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
## The password used to generate the certificate
#server.ssl.key-store-password=8GHuEC3VnKVPwxJT
## The alias mapped to the certificate
#server.ssl.key-alias=tomcat

# ===============================
# = EMAIL
# ===============================
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000
mail.smtp.port=25
mail.mime.charset=UTF-8
mail.test.on=${mailTest:true}
mail.test.to=gilsonn_souza@hotmail.com

# ===============================
# = Log
# ===============================
-Dorg.slf4j.simpleLogger.defaultLogLevel=${defaultLogLevel:INFO}
logging.level.org.springframework.web=${defaultLogLevel:INFO}
logging.level.org.hibernate=ERROR

# ===============================
# = Avoiding InstanceAlreadyExistsException when running multiple applications on same Tomcat
# = javax.management.InstanceAlreadyExistsException: com.zaxxer.hikari:name=dataSource,type=HikariDataSource
# ===============================
spring.jmx.default-domain=caderneta


# ===============================
# = SECURITY
# ===============================
encryptor.secret=${encryptorSecret:3qiehWdmt6szN9Co}
jwt.secret=${jwtSecret:jo19j27ue87cG2nC}
